name: Release

on:
  push:
    branches:
      - go
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    branches:
      - go

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    # 确保只在 go 分支的 tag 上运行
    if: startsWith(github.ref, 'refs/tags/') && github.ref_name != ''
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: go  # 明确检出 go 分支

      - name: Verify branch
        run: |
          # 验证当前 tag 是否在 go 分支上
          BRANCH=$(git branch -r --contains ${{ github.ref }} | grep 'origin/go' || echo "")
          if [ -z "$BRANCH" ]; then
            echo "Error: Tag is not on 'go' branch"
            exit 1
          fi
          echo "Verified: Tag is on go branch"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: Get version
        id: version
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=$(git describe --tags --always --dirty)" >> $GITHUB_OUTPUT
          fi

      - name: Install dependencies
        run: |
          git checkout go
          go mod download
          go mod verify

      - name: Run tests
        run: make test

      - name: Build all platforms
        run: make release
        env:
          VERSION: ${{ steps.version.outputs.VERSION }}

      - name: Generate release notes
        id: notes
        run: |
          cat > release_notes.md << 'EOF'
          ## 🚀 usbctl ${{ steps.version.outputs.VERSION }}
          
          ### 📦 Downloads
          
          Choose the appropriate binary for your platform:
          
          - **Linux AMD64**: `usbctl-${{ steps.version.outputs.VERSION }}-linux-amd64.tar.gz`
          - **Linux ARM64**: `usbctl-${{ steps.version.outputs.VERSION }}-linux-arm64.tar.gz`
          - **Windows AMD64**: `usbctl-${{ steps.version.outputs.VERSION }}-windows-amd64.zip`
          - **macOS AMD64**: `usbctl-${{ steps.version.outputs.VERSION }}-darwin-amd64.tar.gz`
          - **macOS ARM64**: `usbctl-${{ steps.version.outputs.VERSION }}-darwin-arm64.tar.gz`
          
          ### ✅ Checksums
          
          Verify your download with SHA256 checksums (see `checksums.txt`).
          
          ### 🔧 Installation
          
          #### Linux / macOS
          ```bash
          # Extract
          tar xzf usbctl-*-linux-amd64.tar.gz
          cd usbctl-*-linux-amd64
          
          # Run
          sudo ./usbctl
          ```
          
          #### Windows
          ```powershell
          # Extract ZIP file
          # Run as Administrator
          .\usbctl.exe
          ```
          
          ### 📝 Usage
          
          ```bash
          usbctl --help
          usbctl -p 8080 -v
          ```
          
          Visit http://localhost:11980 in your browser.
          
          ### 🆕 What's New
          
          See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
          
          ---
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v1.0.0...${{ steps.version.outputs.VERSION }}
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: Release ${{ steps.version.outputs.VERSION }}
          body_path: release_notes.md
          files: |
            dist/*.tar.gz
            dist/*.zip
            dist/checksums.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: usbctl-${{ steps.version.outputs.VERSION }}
          path: |
            dist/*.tar.gz
            dist/*.zip
            dist/checksums.txt
          retention-days: 30

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build-and-release
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max