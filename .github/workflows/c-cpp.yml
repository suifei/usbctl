name: Release

on:
  push:
    tags:
      - 'v*'  # 当推送以 v 开头的 tag 时触发（如 v1.0.0, v2.1.0）

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        body: |
          ## 更新内容
          
          详细更新内容请查看 [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/CHANGELOG.md)
          
          ## 下载说明
          
          - **Linux (x64)**: `usbctl-linux-amd64`
          - **Linux (ARM64)**: `usbctl-linux-arm64`
          
          ## 安装和使用
          
          1. 下载对应平台的可执行文件，并修改文件名 : `mkdir build && mv usbctl-linux-arm64 build/usbctl`
          2. 给文件添加执行权限（Linux/macOS）: `chmod +x usbctl-*`
          3. 查看使用帮助: `./usbctl-* --help`
          4. 安装（确保 usbctl 在 build/usbctl 目录）：`chmod +x install-service.sh && ./install-service.sh install`

  build-and-upload:
    needs: create-release
    strategy:
      matrix:
        include:
          # Linux 构建
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            binary_suffix: ""
            artifact_name: usbctl-linux-amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            binary_suffix: ""
            artifact_name: usbctl-linux-arm64
            
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # 如果是 C/C++ 项目，取消注释以下部分
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential gcc-multilib
        # 如果需要交叉编译工具链，可以添加：
        sudo apt-get install -y gcc-aarch64-linux-gnu gcc-mingw-w64

    # 根据您的 Makefile 调整构建命令
    - name: Build binary
      run: |
        make ${{ matrix.artifact_name }}
        
        # 确保二进制文件存在
        ls -la ${{ matrix.artifact_name }}

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.artifact_name }}
        asset_name: ${{ matrix.artifact_name }}
        asset_content_type: application/octet-stream

    #     asset_content_type: application/vnd.debian.binary-package
